---
title: "Creating Efficient Workflows in R"
subtitle: "Parks Canada; Ecological Integrity Monitoring Program"
author: "Andy Teucher"
format: 
  revealjs: 
    height: 900
    width: 1600
    theme: [moon, slides.scss]
    highlight-style: a11y
    slide-number: true
    chalkboard: true
execute:
  freeze: auto
---

```{r}
library(countdown)
library(fs)
```

## Introductions

<br>

::::: columns
::: {.column width="50%"}
**Me: Andy Teucher**

![](img/andy-hognose-circle.png){width="40%"}

{{< fa globe >}} [andyteucher.ca](https://andyteucher.ca)

{{< fa brands github >}} [ateucher](https://github.com/ateucher)

{{< fa brands bluesky >}} [andyteucher](https://bsky.app/profile/andyteucher.bsky.social)

{{< fa brands linkedin >}} [andy-teucher](https://www.linkedin.com/in/andy-teucher/)
:::

::: {.column width="50%"}
**Yourselves**

- Name
- Where you are
- What you work on
- Hardest thing about R

:::
:::::

## Resources

<br>

Workshop website: <https://andyteucher.ca/pc-intermediate-r/>

<br>

WTF Book: <https://rstats.wtf/>

## Project-oriented workflows

-   Concept of a project <!-- (vs `setwd("it/works/on/my/machine")`) -->
-   Project structure
-   Embrace the blank slate <!-- Restart often (vs `rm(list = ls())`) -->
-   Naming things
-   File organization

## Personal R administration

-   Where do packages live?
-   Installing and updating packages
-   R Startup
-   `.Rprofile` and `.Renviron` files

## Efficient use of your IDE

-   Customizing your IDE
-   Keyboard shortcuts
-   Command palette
-   Tab completion
-   Autoformatting code
-   Getting help: Reprexes

# Getting started with Positron

![](img/positron-logo.png)

<https://positron.posit.co/> 

- See "Migrating from RStudio" section

## Layout

![](img/user-interface-rstudio-vs-positron.jpeg)

::: footer
<https://github.com/posit-dev/positron-website/pull/116/>
:::

## Layout

![](img/user-interface-for-rstudio-migration.jpeg)

::: footer
<https://github.com/posit-dev/positron-website/pull/116/>
:::

::: notes
These UI elements are the most novel for RStudio users:

The Activity bar provides access to different functional capabilities of Positron. Clicking here changes what appears in the Primary side bar.
The Primary side bar displays context-specific content based on which icon is clicked in the Activity bar.
:::

## Keyboard shortcuts

Enable Rstudio keyboard shortcuts via:

`Settings > Workbench > Keybindings: Rstudio Keybindings`

![](img/rstudio-shortcuts-positron)

## Command palette
<br>

### Access all the things
<br>
`Ctrl + Shift + P`

## Extensions
<br>

::: columns

::: {.column width="50%"}

### Pre-installed

- Quarto
- Air

:::

::: {.column width="50%"}

### Other extensions

- Rainbow csv
- vscode-pdf
- Themes

:::
:::

::: notes
Command palette: "install". Search "tomorrow night".
:::

## Data Explorer

![](img/data-viewer-iris.png)

# Project-oriented workflows

Often we are (or think we are) only doing our data work on our own </br></br> When we want to facilitate collaboration or focus on reproducibility, we need new strategies </br></br> [What they Forgot to Teach You About R](https://rstats.wtf/) - Much of this material is distilled from this book.

Jenny Bryan is a hero in the R world.

An early adopter teaching R/GitHub as a prof at UBC, now at Posit

## Learning objectives

1.  Establish the concept of the project as the basic organizational unit of work.

2.  Apply best practices in and leverage benefits of using a project-oriented workflow.

-   Creating robust file paths that travel well in time and space.

-   Constructing human and machine readable file names that sort nicely.

-   Differentiating workflow elements, analysis inputs, and analysis outputs in project structure to create navigable programming interfaces.

-   Restarting R frequently, with a blank slate.

## Prerequisites

```{r}
#| eval: false
#| echo: true
install.packages(c("tidyverse", "devtools"))

devtools::install_github("r-lib/usethis")
```

## Be organized as you go, <br> not "tomorrow"

:::::: columns
::: {.column width="50%"}
Don't fret over past mistakes.

<!-- ![](img/beer-house.png) -->
:::

::: {.column width="4%"}
:::

::: {.column .fragment width="46%"}
Raise the bar for new work.

<!-- ![](img/beer-organized.png) -->
:::
::::::

## Prerequisite: Save code in scripts

**Saving code is an absolute requirement for reproducibility. (Future you, future us)**

- Save commands as "scripts" (.R) or ‚Äúnotebooks‚Äù (.Rmd).
- It doesn't have to be polished.
- Just save it!

- Everything that really matters should be achieved through code that you save
- Contrast: Series of unrecorded mouse clicks

The **process** is important, the **product** is just an outcome 

- Outputs should be treated as disposable 
- Scripts are the source of truth

## Adopt a project-oriented workflow

<br>

:::::: columns
::: {.column width="48%"}
### Why

-   work on more than 1 thing at a time

-   collaborate, communicate, distribute

-   start and stop safely
:::

::: {.column width="4%"}
:::

::: {.column .fragment width="48%"}
### How

-   dedicated directory

-   RStudio <ins>**P**</ins>roject or Positron Workspace

-   Git repo, probably syncing to a remote
:::
::::::

::: footer
Project-oriented workflows
:::

## If the top of your script is

<br>

```{r}
#| eval: false
#| echo: true
setwd("C:/Users/andy/path/that/only/I/have")
rm(list = ls())
```

<br>

There is another path.

<br>

::: {.fragment fragment-index="1"}
Project-oriented workflow designs this away.
üôå
:::

::: footer
Project-oriented workflows
:::

## Organize your work into projects

One folder per project.

-   Report?
    R package?
    Chapter?
    Website?
    Whatever.

-   Can be the same unit as a GitHub Repo.

-   If using RStudio, it‚Äôs Project (capital P)
- If using Positron, it‚Äôs Workspace

-   Each Project gets its own R instance

-   R starts at the project root working directory: all paths are relative to the project's folder.

::: footer
Project-oriented workflows
:::

## Organize your work into projects

```{r}
withr::with_dir(
  "_examples",
  fs::dir_tree("my-project/")
)
```

::: footer
Project-oriented workflows
:::

## What does it mean to be an RStudio **P**roject?

Open Project = dedicated instance of **RStudio**

-   dedicated **R** process
-   file browser pointed at Project directory
-   working directory set to Project directory

. . .

<br>

RStudio leaves notes to itself in `foo.Rproj`

## What does it mean to be a Positron ~~**P**roject~~ Workspace?

Open Project = dedicated instance of **Positron**

-   dedicated **R** process
-   file browser pointed at Project directory
-   working directory set to Project directory

. . .

<br>

Often just a project folder that‚Äôs been opened in its own window via *Open Folder* or similar

-   `.git/` directory
-   `.Rproj` file
-   `.vscode/settings.json` file
-   `_quarto.yml` file
-   `DESCRIPTION` file
-   `renv.lock` file
-   `.here` file

## Practice "safe paths"

**The chance of `setwd()` having the desired effect -- making the file paths work -- for anyone besides its author is `~0%`.**

``` r
library(ggplot2)
setwd("/Users/andy/cuddly_broccoli/verbose/foofy/data")
df <- read.csv(‚Äúraw_foofy_data.csv‚Äù)
p <- ggplot(df, aes(x, y)) + geom_point()
ggsave("/Users/andy/cuddly_broccoi/ambiguous/fig.png")
```

<br> It's also unlikely to work for the author one or two years or computers from now.

Hard-wired, absolute paths, especially when sprinkled throughout the code, make a project brittle.
Such code does not travel well across time or space.

## Practice "safe paths"

<br>

relative to a **stable base**, not **absolute paths**.

<br>

use **file system functions**, not paste(), strsplit(), etc.

::: notes
Working directory is associated with a specific process or running application.

When you open a project in RStudio or Positron, it sets the working directory to the project root - this is that "stable base"

"Working directory" as a concept is not comparable to "home directory".
"Home directory" is a static, persistent thing.
:::

## Practice "safe paths"

Instead of:

```{r}
#| eval: false
#| echo: true
setwd("C:/Users/andy/path/that/only/I/have")
my_data <- read.csv("data/my_data.csv")
```

Or:

```{r}
#| eval: false
#| echo: true
my_data <- read.csv("C:/Users/andy/path/that/only/I/have/data/my_data.csv")
```

## Practice "safe paths"

Set your work up as an RStudio or Positron Project/Workspace and use relative paths:

```{r}
#| eval: false
#| echo: true
my_data <- read.csv("data/my_data.csv")
```

Or:

```{r}
#| eval: false
#| echo: true
my_data <- read.csv(file.path("data", "my_data.csv"))
```

## Work on multiple projects at once

Because each project uses an isolated **R** process

![](img/many-projects.png)

## Which persist after `rm(list = ls())`?

| Option                                 | Persists? |
|----------------------------------------|-----------|
| A. `library(dplyr)`                    |           |
| B. `summary <- head`                   |           |
| C. `options(stringsAsFactors = FALSE)` |           |
| D. `Sys.setenv(LANGUAGE = "fr")`       |           |
| E. `x <- 1:5`                          |           |
| F. `attach(iris)`                      |           |

```{r}
countdown(
  minutes = 2
)
```

## Which persist after `rm(list = ls())`?

| Option | Persists? |
|-----------------------------------------------------|-------------------|
| A. `library(dplyr)` | [{{< fa check >}}]{style="color:#8afb00;"} |
| B. `summary <- head` | [{{< fa xmark >}}]{style="color:#ccc;"} |
| C. `options(stringsAsFactors = FALSE)` | [{{< fa check >}}]{style="color:#8afb00;"} |
| D. `Sys.setenv(LANGUAGE = "fr")` | [{{< fa check >}}]{style="color:#8afb00;"} |
| E. `x <- 1:5` | [{{< fa xmark >}}]{style="color:#ccc;"} |
| F. `attach(iris)` | [{{< fa check >}}]{style="color:#8afb00;"} |

## Start R with a blank slate

:::::: columns
::: {.column width="48%"}
-   Save **code** for reproducibility.
-   When you quit: do not save the workspace to an `.Rdata` file.
-   When you start: do not reload the workspace from an `.Rdata` file.
-   In RStudio, set this via `Tools > Global Options`.
-   Or use `usethis::use_blank_slate()`
:::

::: {.column width="2%"}
:::

::: {.column width="50%"}
![](img/rstudio-blank-slate.png)
:::
::::::

*This is the default (and not customizable) in Positron* 

## Restart R often

<br>

:::::: columns

::: {.column width="48%"}
Session -\> Restart R

![](img/restart-rstudio.png)
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
Windows

-   `Ctrl + Shift + F10`

Mac

-   `Cmd + Shift + 0`
:::

::::::

## Project initiation

:::: columns

::: {.column width="48%"}
### RStudio Project

1.  New folder + make it an RStudio Project

-   `usethis::create_project("~/i_am_new")`

-   File -\> New Project -\> New Directory -\> New Project

. . .

2.  Make existing folder into an RStudio Project

-   `usethis::create_project("~/i_exist")`

-   File -\> New Project -\> Existing Directory
::: 

::: {.column width="4%"}
:::

::: {.column width="48%"}
### Positron Workspace

1.  New folder + make it a workspace

-   `usethis::create_project("~/i_am_new", rstudio = FALSE)`

-   File -\> New Folder From Template

. . .

2.  Open an existing directory as a workspace

-   `usethis::create_project("~/i_exist", rstudio = FALSE)`

-   File -\> New Project -\> Existing Directory

*Note: if you don't specify `rstudio = FALSE`, it will create an RStudio `.Rproj` file. This does no harm.*
:::
::::

. . .

::: question
Try either option now with a folder containing (or that will contain) `Bivalve Data 2014-2022_ICE.csv`.
:::

```{r}
countdown(
  minutes = 2
  )
```

## Naming things

:::::: columns
::: {.column width="48%"}
<br> machine readable

<br>

human readable

<br>

sort nicely
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
![](img/jenny-naming-things.png)

Jenny Bryan ‚ÄúNaming things‚Äù video

NormConf ¬∑ Dec 4, 2022:

<https://www.youtube.com/watch?v=ES1LTlnpLMk>
:::
::::::

## Naming things

::: question
What features differentiate üòî vs üòç?
:::

:::::::: columns
::::: {.column width="10%"}
<br>

::: r-fit-text
üòî
:::

<br>

<br>

::: r-fit-text
üòç
:::
:::::

::: {.column width="4%"}
:::

::: {.column .small width="86%"}
myabstract.docx

Joe's Filenames Use Spaces and Punctuation.xlsx

figure 1.png

homework.R

JW7d\^(2sl\@deletethisandyourcareerisoverWx2\*.txt

<br>

2018-01_teucher-abstract-conference.docx

joes-filenames-are-getting-better.xlsx

fig01_scatterplot-talk-length-vs-interest.png

2024-07-25_ecol-455_assignment-5.R

1986-01-28_raw-data-from-challenger-o-rings.txt
:::
::::::::

```{r}
countdown(
  minutes = 1
  )
```

## Names machines like {.smaller}

1.  don't leave white space

. . .

2.  use letters, numbers, hyphens and underscores... that's it <br> (characters like \^.\*?+\|\$ can have a special meaning)

. . .

3.  be consistent with case <br> (some operating systems treat a and A the same, some differently).

. . .

4.  use separator characters wisely

¬† ¬† use underscore `_` to separate different chunks

¬† ¬† use hyphen `-` for words in the same chunk

. . .

<br>

This creates names that are regular expression and globbing friendly, and easy to compute on!
üéâ

::: footer
Adapted from <br> <https://djnavarro.net/slides-project-structure/#1>.
:::

::: notes
Globbing: use of pattern matching against the names in a filesystem directory such that a name pattern is expanded into a list of names matching that pattern.
:::

## Names humans like

<br>

name contains info on content

name anticipates context

concept of a slug üêå from user-friendly URLs

-   1986-01-28\_`raw-data-from-challenger-o-rings`.txt

-   concise, meaningful description

-   usually appended to the end

::: notes
Note: A URL slug is the part of the URL after the last backslash
:::

## Names that sort nicely

<br>

put something numeric in there

left pad with zeros for constant width, nice sorting, `01`

use the ISO 8601 standard for dates, `YYYY-MM-DD`

order = chronological or ...
consider common sense

## ISO 8601

::::::: {.columns .v-center-container}
::: {.column width="40%"}
![](img/chicken-broth.PNG)
:::

::: {.column width="4%"}
:::

:::: {.column width="56%"}
::: r-fit-text
YYYY-MM-DD

ISO 8601
:::

<https://www.iso.org/iso-8601-date-and-time-format.html>
::::
:::::::

::: footer
<https://twitter.com/JennyBryan/status/816143967695687684>
:::

## üëç file names {.center-x}

```{r}
#| echo: true
library(fs)
library(dplyr)

ft <- tibble(files = dir_ls("_examples/data/", glob = "*.csv"))
```

<br>

Intuitive sorting.

:::: columns

::: column
```{r}
#| echo: true
ft
```
:::

::: column
```{r}
#| echo: true
arrange(ft, desc(files))
```
:::

::::


## üëç file names {.center-x}

```{r}
#| echo: true
library(stringr)

filter(ft, str_detect(files, pattern = "plot-data"))
```

Easy to filter in R (or the shell or whatever)

## üëç file names {.center-x}

```{r}
#| echo: true
library(tidyr)

ft |> 
  mutate(files = path_ext_remove(files)) |> 
  separate(files, into = c("date", "site", "data_type"), sep = "_")
```

Intentional delimiters means meta-data is easily recovered.

`_` delimits fields; `-` delimits words

::: question
Rename the file `Bivalve Data 2014-2022_ICE.csv` to something that is machine readable, human readable, and sorts nicely.

Read the file in to R using a relateive path
:::

## Names matter

<br>

machine readable, human readable, and sort nicely

<br>

. . .

easy to implement NOW

<br>

payoffs accumulate as your skills evolve and <br> projects get more complex

## Project structure

```{r}
withr::with_dir(
  "_examples",
  fs::dir_tree("my-project/")
)
```

# Personal R administration

## Your R installation

## R packages

::: {.fragment fragment-index="1"}
**R packages**

-   the natural unit for distributing R code
:::

::: {.fragment fragment-index="2"}
**base R**

-   14 base + 15 recommended packages

-   ships with all binary distributions of R
:::


## Additional packages

:::: columns
::: {.column width="48%"}
**CRAN, \~20k packages**

```{r}
#| eval: false
#| echo: true
# install from CRAN
install.packages("devtools")
# attach
library(devtools)
```
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}

**GitHub ~‚àû packages**


```{r}
#| eval: false
#| echo: true
# install from GitHub
remotes::install_github("r-lib/devtools")
# attach
library(devtools)
```
*development versions, or packages not on CRAN*

:::
::::

## R Libraries - where do packages live?

- A library is a directory containing installed packages
- You have at least one library on your computer
- Common (and recommended) to have two libraries: 
    - A *system* library with base (14) and recommended (15) packages; installed with R.
    - A *user* library with user-installed packages
- We use `library(pkg)` function to attach a package
- 7 base packages are always attached (base, methods, utils, stats, grDevices, datasets, graphics)


## Where do packages live locally?

<br>

The system library (base/recommended packages).

`.Library`

<br>

All libraries for the current session

`.libPaths()`

<br>

All installed packages

`installed.packages()`

## Your turn

1. What libraries are in use in your current R session?
2. Using `installed.packages()`, what are the base and recommended packages?

## Installing and updating packages



## R Startup

![](img/r-startup.svg)

::: notes
complexity in R startup, for both personal and system-level customization. We can ignore most of it
:::

## R Startup

1. `.Rprofile` - contains **R code** to be run at the start of each session.
2. `.Renviron` - contains **environment variables** to be set in R sessions.

## what to put in `.Rprofile`

-   set a default CRAN mirror
-   custom startup message

## what *not* to put in `.Rprofile`

If it matters for code you share, it **should not** be in `.Rprofile`

### why shouldn't these go in `.Rprofile`?

::: incremental
-   `library(tidyverse)`
-   `f <- dplyr::filter`
-   `theme_set(theme_bw())`
:::

## Why *might* these be safe to put in `.Rprofile`?

<br>

``` r
library(usethis)
library(devtools)
```

## `.Rprofile` 

```{r}
#| eval: false
#| echo: true
usethis::edit_r_profile()
```

```{r}
# eval: false
# echo: true
if (interactive()) {
  if ("fortunes" %in% rownames(installed.packages())) {
    fortunes::fortune()
  }
  require("usethis")
}
```

## `.Renviron`

- Set environment variables for R sessions
- Often sensitive information that you don't want to share

### Examples
- API Keys (Eg GitHub, ChatGPT etc)
- Database username and password
- Some R options

## `.Renviron`

```{r}
#| eval: false
#| echo: true
usethis::edit_r_environ()
```

```
VAR_NAME=value
GOOGLE_API_KEY=your_api_key_here
```

## `.Renviron`

Access environment variables in R with `Sys.getenv("VAR_NAME")`

```{r}
#| eval: false
#| echo: true
Sys.getenv("GOOGLE_API_KEY")
#> [1] "your_api_key_here"
```

## Your turn

- Create an environment variable in `.Renviron` called `MY_NAME` with your name as the value.
- Create a custom startup message in `.Rprofile` that gives you a personalized message when you start R.

# Efficient use of your IDE

## Customizing your IDE

<br>

- Pane layout
- Themes
- Fonts
- Positron extensions


## Keyboard shortcuts

### If in doubt, use the command palette: `Ctrl + Shift + P`

## Navigation & Files

-   **Ctrl + Shift + N** - New file
-   **Ctrl + S** - Save current file
-   **Ctrl + F** - Find in current file
-   **Ctrl + Shift + F** - Find in files (global search)
-   **Ctrl + .** - Go to file/function
-   **Ctrl + 1** - Focus source editor
-   **Ctrl + 2** - Focus console

## Code Editing

-   **Ctrl + Shift + C** - Comment/uncomment lines
-   **Tab** - Indent selection
-   **Shift + Tab** - Unindent selection
-   **Alt + Up/Down** - Move line(s) up/down
-   **Alt + Shift + Up/Down** - Duplicate line(s) ???
-   **Ctrl + X** - Cut entire line (when no selection)

## Magic of Multiple Cursors

-   **Ctrl + Alt + Up/Down** - Add cursor above/below
-   **Ctrl + D** - Add next occurrence of selected text (custom)

## Navigation Within Code

-   **Ctrl + Left/Right** - Jump word by word
-   **Home/End** - Jump to beginning/end of line
-   **Ctrl + Home/End** - Jump to beginning/end of document
-   **Ctrl + P** - Jump to matching brace

## R-Specific

-   **Tab** - Auto-complete
-   **F1** - Show help for function under cursor
-   **Ctrl + Shift + F10** - Restart R session
-   **Ctrl + Shift + M** - Insert pipe operator (`%>%` or `|>`)
-   **Alt + -** - Insert assignment operator (`<-`)

## `.Last.value`

Shows last evaluated value in console

### RStudio

- Tools > Global Options > General > Advanced > Show `.Last.value` in environment listing

### Positron

Controlled by an option:

```{r}
#| eval: false
#| echo: true
usethis::edit_r_profile()
options(positron.show_last_value = TRUE)
```

## Automatic code formatting

### Air: <https://posit-dev.github.io/air/>

- In charge of the *layout* of your R code. 
- Formatters do not change the meaning of code
- Ensure that whitespace, newlines, and other punctuation conform to a set of rules and standards

```{r}
#| eval: false
#| echo: true
usethis::use_air()
```

## Reprexes



# Homework

## Start using project-oriented workflows in your work

<br>

- Use RStudio or Positron Projects/Workspaces
- don't use `setwd()`
- use relative paths
- Use a blank slate - restart R often

## Try to name files well

<br>

- machine readable
- human readable
- sorts nicely (including ISO 8601 dates)

## Use Positron or RStudio more efficiently

<br>

- use keyboard shortcuts
- use the command palette
- use Air
