{
  "hash": "b884f8fb6b47d220f66d69891d967f28",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating Efficient Workflows in R\"\nsubtitle: \"Parks Canada; Ecological Integrity Monitoring Program\"\nauthor: \"Andy Teucher\"\nformat: \n  revealjs: \n    height: 900\n    width: 1600\n    theme: [moon]\n    highlight-style: a11y\n    slide-number: true\n    chalkboard: true\nexecute:\n  freeze: auto\n---\n\n\n::: {.cell}\n\n:::\n\n\n## Introductions\n\n<br>\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**Me: Andy Teucher**\n\n![](img/andy-hognose-circle.png){width=\"40%\"}\n\n{{< fa globe >}} [andyteucher.ca](https://andyteucher.ca)\n\n{{< fa brands github >}} [ateucher](https://github.com/ateucher)\n\n{{< fa brands bluesky >}} [andyteucher](https://bsky.app/profile/andyteucher.bsky.social)\n\n{{< fa brands linkedin >}} [andy-teucher](https://www.linkedin.com/in/andy-teucher/)\n\n\n:::\n\n::: {.column width=\"50%\"}\n**Yourselves**\n\n\n:::\n::::\n## Resources\n\n<br>\n\nWorkshop website: <https://andyteucher.ca/pc-intermediate-r/>\n\n<br>\n\nWTF Book: <https://rstats.wtf/>\n\n## Project-oriented workflows\n\n- Concept of a project <!-- (vs `setwd(\"it/works/on/my/machine\")`) -->\n- Project structure\n- Embrace the blank slate <!-- Restart often (vs `rm(list = ls())`) -->\n- RStudio and/or Positron settings\n- Naming things\n- File organization\n\n## Personal R administration\n\n- Where do packages live?\n- Installing and updating packages\n- R Startup\n- `.Rprofile` and `.Renviron` files\n\n## Efficient use of your IDE\n- Customizing your IDE\n- Keyboard shortcuts\n- Command palette\n- Tab completion\n- Autoformatting code\n- Getting help: Reprexes\n\n# Project-oriented workflows\n\nOften we are (or think we are) only doing our \ndata work on our own\n</br></br>\nWhen we want to facilitate collaboration or focus on reproducibility, we need new strategies\n</br></br>\n[What they Forgot to Teach You About R](https://rstats.wtf/) - Much of this thinking is distilled from Bryan & Hester‚Äôs awesome course. Jenny Bryan is a hero in the R world. An early adopter teaching R/GitHub as a prof at Univ. British Columbia, now at Posit\n\n## Learning objectives\n\n1. Establish the concept of the project as the basic organizational unit of work.\n\n2. Apply best practices in and leverage benefits of using a project-oriented workflow.\n\n* Creating robust file paths that travel well in time and space.\n\n* Constructing human and machine readable file names that sort nicely.\n\n* Differentiating workflow elements, analysis inputs, and analysis outputs in project structure to create navigable programming interfaces.\n\n* Restarting R frequently, with a blank slate.\n\n## Be organized as you go, <br> not \"tomorrow\"\n\n::: columns\n::: {.column width=\"50%\"}\nDon't fret over past mistakes.\n\n<!-- ![](img/beer-house.png) -->\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column .fragment width=\"46%\"}\nRaise the bar for new work.\n\n<!-- ![](img/beer-organized.png) -->\n:::\n:::\n\n## Prerequisite: Save code in scripts\n\n**Saving code is an absolute requirement for reproducibility. (Future you, future us)**\n\nSave commands as \"scripts\" (.R) or ‚Äúnotebooks‚Äù (.Rmd). It doesn't have to be polished. Just save it!\n\nEverything that really matters should be achieved through code that you save\n- Including creating figures\n- Contrast: Series of unrecorded mouse clicks\n\nThe **process** is important, the **product** is just an outcome\n- Outputs should be treated as disposable \n- Scripts are the source of truth\n\n\n## Adopt a project-oriented workflow\n\n<br>\n\n::: columns\n::: {.column width=\"48%\"}\n### Why\n\n-   work on more than 1 thing at a time\n\n-   collaborate, communicate, distribute\n\n-   start and stop safely\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column .fragment width=\"48%\"}\n### How\n\n-   dedicated directory\n\n-   RStudio <ins>**P**</ins>roject\n\n-   Git repo, probably syncing to a remote\n:::\n:::\n\n::: footer\nProject-oriented workflows\n:::\n\n## If the top of your script is\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/andy/path/that/only/I/have\")\nrm(list = ls())\n```\n:::\n\n\n<br>\n\nThere is another path.\n\n<br>\n\n::: {.fragment fragment-index=\"1\"}\nProject-oriented workflow designs this away.\nüôå\n:::\n\n::: footer\nProject-oriented workflows\n:::\n\n## Organize your work into projects\n\nOne folder per project.\n\n* Report? R package? Chapter? Website? Whatever.\n* Can be the same unit as a GitHub Repo.\n\n* If using RStudio, it‚Äôs Project (capital P)\n* Each Project gets its own R instance\n* R starts at the project root working directory: \nall paths are relative to the project's folder.\n\n::: footer\nProject-oriented workflows\n:::\n\n## Organize your work into projects\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmy-project/\n‚îú‚îÄ‚îÄ 01-read_data.R\n‚îú‚îÄ‚îÄ 02-clean_data.R\n‚îú‚îÄ‚îÄ 03-analysis.R\n‚îú‚îÄ‚îÄ 04-output.R\n‚îú‚îÄ‚îÄ R\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ data\n‚îÇ   ‚îú‚îÄ‚îÄ derived_data\n‚îÇ   ‚îî‚îÄ‚îÄ raw_data\n‚îú‚îÄ‚îÄ outputs\n‚îî‚îÄ‚îÄ paper\n    ‚îú‚îÄ‚îÄ paper.qmd\n    ‚îî‚îÄ‚îÄ references.bib\n```\n\n\n:::\n:::\n\n\n::: footer\nProject-oriented workflows\n:::\n\n## What does it mean to be an RStudio **P**roject?\n\nOpen Project = dedicated instance of **RStudio**\n\n-   dedicated **R** process\n-   file browser pointed at Project directory\n-   working directory set to Project directory\n\n. . .\n\n<br>\n\nRStudio leaves notes to itself in `foo.Rproj`\n\n## What does it mean to be a Positron ~~**P**roject~~ Workspace?\n\nOpen Project = dedicated instance of **Positron**\n\n-   dedicated **R** process\n-   file browser pointed at Project directory\n-   working directory set to Project directory\n\n. . .\n\n<br>\n\nOften just a project folder that‚Äôs been opened in its own window via _Open Folder_ or similar\n\n- `.git/` directory\n- `.Rproj` file\n- `.vscode/settings.json` file\n- `_quarto.yml` file\n- `DESCRIPTION` file\n- `renv.lock` file\n- `.here` file\n\n## Practice \"safe paths\"\n\n<br>\n\nrelative to a **stable base**, not **absolute paths**.\n\n<br>\n\nuse **file system functions**, not paste(), strsplit(), etc.\n\n::: notes\nWorking directory is associated with a specific process or running application.\n\nWhen you open a project in RStudio or Positron, it sets the working directory to the project root - this is that \"stable base\"\n\n\"Working directory\" as a concept is not comparable to \"home directory\".\n\"Home directory\" is a static, persistent thing.\n:::\n\n## Practice \"safe paths\"\n\nInstead of:\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/andy/path/that/only/I/have\")\nmy_data <- read.csv(\"data/my_data.csv\")\n```\n:::\n\n\nOr: \n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(\"C:/Users/andy/path/that/only/I/have/data/my_data.csv\")\n```\n:::\n\n\n## Practice \"safe paths\"\n\nSet your work up as an RStudio or Positron Project/Workspace and use relative paths:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(\"data/my_data.csv\")\n```\n:::\n\n\nOr:\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(file.path(\"data\", \"my_data.csv\"))\n```\n:::\n\n\n## Which persist after `rm(list = ls())`?\n\n| Option                               | Persists?                                      |\n|-------------------------------------------------------|-----------------|\n| A. `library(dplyr)`                    |  |\n| B. `summary <- head`                  |  |\n| C. `options(stringsAsFactors = FALSE)` |  |\n| D. `Sys.setenv(LANGUAGE = \"fr\")`        |  |\n| E. `x <- 1:5`                         |  |\n| F. `attach(iris)`                      |  |\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_d073c8f0\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Which persist after `rm(list = ls())`?\n\n| Option                               | Persists?                                    |\n|-------------------------------------------------------|-----------------|\n| A. `library(dplyr)`                    | <span style=\"color:green;\">{{< fa check >}}</span> |\n| B. `summary <- head`                  | <span style=\"color:red;\">{{< fa xmark >}}</span> |\n| C. `options(stringsAsFactors = FALSE)` | <span style=\"color:green;\">{{< fa check >}}</span> |\n| D. `Sys.setenv(LANGUAGE = \"fr\")`       | <span style=\"color:green;\">{{< fa check >}}</span> |\n| E. `x <- 1:5`                         | <span style=\"color:red;\">{{< fa xmark >}}</span> |\n| F. `attach(iris)`                      | <span style=\"color:green;\">{{< fa check >}}</span> |\n\n\n\n\n\n# Personal R administration\n\n## Slide 1\n\n::: footer\nPersonal R administration\n:::\n\n# Efficient use of your IDE\n\n## Slide 1\n\n::: footer\nEfficient use of your IDE\n:::\n\n\n## Keyboard shortcuts\n\n## Navigation & Files\n- **Ctrl + Shift + N** - New file\n- **Ctrl + S** - Save current file\n- **Ctrl + F** - Find in current file\n- **Ctrl + Shift + F** - Find in files (global search)\n- **Ctrl + .** - Go to file/function\n- **Ctrl + 1** - Focus source editor\n- **Ctrl + 2** - Focus console\n\n## Code Editing\n- **Ctrl + Shift + C** - Comment/uncomment lines\n- **Tab** - Indent selection\n- **Shift + Tab** - Unindent selection\n- **Alt + Up/Down** - Move line(s) up/down\n- **Alt + Shift + Up/Down** - Duplicate line(s) ???\n- **Ctrl + X** - Cut entire line (when no selection)\n\n## Magic of Multiple Cursors\n- **Ctrl + Alt + Up/Down** - Add cursor above/below\n- **Ctrl + D** - Add next occurrence of selected text (custom)\n\n## Navigation Within Code\n- **Ctrl + Left/Right** - Jump word by word\n- **Home/End** - Jump to beginning/end of line\n- **Ctrl + Home/End** - Jump to beginning/end of document\n- **Ctrl + P** - Jump to matching brace\n\n## R-Specific\n- **Tab** - Auto-complete\n- **F1** - Show help for function under cursor\n- **Ctrl + Shift + F10** - Restart R session\n- **Ctrl + Shift + M** - Insert pipe operator (`%>%` or `|>`)\n- **Alt + -** - Insert assignment operator (`<-`)\n",
    "supporting": [
      "workflows_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}