{
  "hash": "d7d73dc0f1332141fc7f97313c8f3920",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating Efficient Workflows in R\"\nsubtitle: \"Parks Canada; Ecological Integrity Monitoring Program\"\nauthor: \"Andy Teucher\"\nformat: revealjs\n---\n\n\n::: {.cell}\n\n:::\n\n\n## Introductions\n\n<br>\n\n::::: columns\n::: {.column width=\"50%\"}\n**Me: Andy Teucher**\n\n![](img/andy-hognose-circle.png){width=\"40%\"}\n\n{{< fa globe >}} [andyteucher.ca](https://andyteucher.ca)\n\n{{< fa brands github >}} [ateucher](https://github.com/ateucher)\n\n{{< fa brands bluesky >}} [andyteucher](https://bsky.app/profile/andyteucher.bsky.social)\n\n{{< fa brands linkedin >}} [andy-teucher](https://www.linkedin.com/in/andy-teucher/)\n:::\n\n::: {.column width=\"50%\"}\n**Yourselves**\n\n- Name\n- Where you are\n- What you work on\n- Hardest thing about R\n\n:::\n:::::\n\n## Resources\n\n<br>\n\nWorkshop website: <https://andyteucher.ca/pc-intermediate-r/>\n\n<br>\n\nWTF Book: <https://rstats.wtf/>\n\n## Project-oriented workflows\n\n-   Concept of a project <!-- (vs `setwd(\"it/works/on/my/machine\")`) -->\n-   Project structure\n-   Embrace the blank slate <!-- Restart often (vs `rm(list = ls())`) -->\n-   Naming things\n-   File organization\n\n## Personal R administration\n\n-   Where do packages live?\n-   Installing and updating packages\n-   R Startup\n-   `.Rprofile` and `.Renviron` files\n\n## Efficient use of your IDE\n\n-   Customizing your IDE\n-   Keyboard shortcuts\n-   Command palette\n-   Tab completion\n-   Autoformatting code\n-   Getting help: Reprexes\n\n# Getting started with Positron\n\n![](img/positron-logo.png)\n\n<https://positron.posit.co/> \n\n- See \"Migrating from RStudio\" section\n\n## Layout\n\n![](img/user-interface-rstudio-vs-positron.jpeg)\n\n::: footer\n<https://github.com/posit-dev/positron-website/pull/116/>\n:::\n\n## Layout\n\n![](img/user-interface-for-rstudio-migration.jpeg)\n\n::: footer\n<https://github.com/posit-dev/positron-website/pull/116/>\n:::\n\n::: notes\nThese UI elements are the most novel for RStudio users:\n\nThe Activity bar provides access to different functional capabilities of Positron. Clicking here changes what appears in the Primary side bar.\nThe Primary side bar displays context-specific content based on which icon is clicked in the Activity bar.\n:::\n\n## Keyboard shortcuts\n\nEnable Rstudio keyboard shortcuts via:\n\n`Settings > Workbench > Keybindings: Rstudio Keybindings`\n\n![](img/rstudio-shortcuts-positron)\n\n## Command palette\n<br>\n\n### Access all the things\n<br>\n`Ctrl + Shift + P`\n\n## Extensions\n<br>\n\n::: columns\n\n::: {.column width=\"50%\"}\n\n### Pre-installed\n\n- Quarto\n- Air\n\n:::\n\n::: {.column width=\"50%\"}\n\n### Other extensions\n\n- Rainbow csv\n- vscode-pdf\n- Themes\n\n:::\n:::\n\n::: notes\nCommand palette: \"install\". Search \"tomorrow night\".\n:::\n\n## Data Explorer\n\n![](img/data-viewer-iris.png)\n\n# Project-oriented workflows\n\nOften we are (or think we are) only doing our data work on our own </br></br> When we want to facilitate collaboration or focus on reproducibility, we need new strategies </br></br> [What they Forgot to Teach You About R](https://rstats.wtf/) - Much of this material is distilled from this book.\n\nJenny Bryan is a hero in the R world.\n\nAn early adopter teaching R/GitHub as a prof at UBC, now at Posit\n\n## Learning objectives\n\n1.  Establish the concept of the project as the basic organizational unit of work.\n\n2.  Apply best practices in and leverage benefits of using a project-oriented workflow.\n\n-   Creating robust file paths that travel well in time and space.\n\n-   Constructing human and machine readable file names that sort nicely.\n\n-   Differentiating workflow elements, analysis inputs, and analysis outputs in project structure to create navigable programming interfaces.\n\n-   Restarting R frequently, with a blank slate.\n\n## Prerequisites\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"devtools\"))\n\ndevtools::install_github(\"r-lib/usethis\")\n```\n:::\n\n\n## Be organized as you go, not \"tomorrow\"\n\n:::::: columns\n::: {.column width=\"50%\"}\nDon't fret over past mistakes.\n\n<!-- ![](img/beer-house.png) -->\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column .fragment width=\"46%\"}\nRaise the bar for new work.\n\n<!-- ![](img/beer-organized.png) -->\n:::\n::::::\n\n## Prerequisite: Save code in scripts\n\n**Saving code is an absolute requirement for reproducibility. (Future you, future us)**\n\n-   Save commands as \"scripts\" (.R) or ‚Äúnotebooks‚Äù (.Rmd).\n-   It doesn't have to be polished.\n-   Just save it!\n\n-   Everything that really matters should be achieved through code that you save\n-   Contrast: Series of unrecorded mouse clicks\n\nThe **process** is important, the **product** is just an outcome \n\n-   Outputs should be treated as disposable \n-   Scripts are the source of truth\n\n## Adopt a project-oriented workflow\n\n<br>\n\n:::::: columns\n::: {.column width=\"48%\"}\n### Why\n\n-   work on more than 1 thing at a time\n\n-   collaborate, communicate, distribute\n\n-   start and stop safely\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column .fragment width=\"48%\"}\n### How\n\n-   dedicated directory\n\n-   RStudio <ins>**P**</ins>roject or Positron Workspace\n\n-   Git repo, probably syncing to a remote\n:::\n::::::\n\n::: footer\nProject-oriented workflows\n:::\n\n## If the top of your script is\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/andy/path/that/only/I/have\")\nrm(list = ls())\n```\n:::\n\n\n<br>\n\nThere is another path.\n\n<br>\n\n::: {.fragment fragment-index=\"1\"}\nProject-oriented workflow designs this away.\nüôå\n:::\n\n::: footer\nProject-oriented workflows\n:::\n\n## Organize your work into projects\n\nOne folder per project.\n\n-   Report?\n    R package?\n    Chapter?\n    Website?\n    Whatever.\n\n-   Can be the same unit as a GitHub Repo.\n\n-   If using RStudio, it‚Äôs Project (capital P)\n- If using Positron, it‚Äôs Workspace\n\n-   Each Project gets its own R instance\n\n-   R starts at the project root working directory: all paths are relative to the project's folder.\n\n::: footer\nProject-oriented workflows\n:::\n\n## Organize your work into projects\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmy-project/\n‚îú‚îÄ‚îÄ 01_read-data.R\n‚îú‚îÄ‚îÄ 02_clean-data.R\n‚îú‚îÄ‚îÄ 03_analysis.R\n‚îú‚îÄ‚îÄ 04_output.R\n‚îú‚îÄ‚îÄ R\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ data\n‚îÇ   ‚îú‚îÄ‚îÄ derived_data\n‚îÇ   ‚îî‚îÄ‚îÄ raw_data\n‚îú‚îÄ‚îÄ outputs\n‚îî‚îÄ‚îÄ paper\n    ‚îú‚îÄ‚îÄ paper.qmd\n    ‚îî‚îÄ‚îÄ references.bib\n```\n\n\n:::\n:::\n\n\n::: footer\nProject-oriented workflows\n:::\n\n## What does it mean to be an RStudio **P**roject?\n\nOpen Project = dedicated instance of **RStudio**\n\n-   dedicated **R** process\n-   file browser pointed at Project directory\n-   working directory set to Project directory\n\n. . .\n\n<br>\n\nRStudio leaves notes to itself in `foo.Rproj`\n\n## What does it mean to be a Positron ~~**P**roject~~ Workspace?\n\nOpen Project = dedicated instance of **Positron**\n\n-   dedicated **R** process\n-   file browser pointed at Project directory\n-   working directory set to Project directory\n\n. . .\n\n<br>\n\nOften just a project folder that‚Äôs been opened in its own window via *Open Folder* or similar\n\n-   `.git/` directory\n-   `.Rproj` file\n-   `.vscode/settings.json` file\n-   `_quarto.yml` file\n-   `DESCRIPTION` file\n-   `renv.lock` file\n-   `.here` file\n\n## Practice \"safe paths\"\n\n**The chance of `setwd()` having the desired effect -- making the file paths work -- for anyone besides its author is `~0%`.**\n\n``` r\nlibrary(ggplot2)\nsetwd(\"/Users/andy/cuddly_broccoli/verbose/foofy/data\")\ndf <- read.csv(‚Äúraw_foofy_data.csv‚Äù)\np <- ggplot(df, aes(x, y)) + geom_point()\nggsave(\"/Users/andy/cuddly_broccoi/ambiguous/fig.png\")\n```\n\n<br> It's also unlikely to work for the author one or two years or computers from now.\n\nHard-wired, absolute paths, especially when sprinkled throughout the code, make a project brittle.\nSuch code does not travel well across time or space.\n\n## Practice \"safe paths\"\n\n<br>\n\nrelative to a **stable base**, not **absolute paths**.\n\n<br>\n\nuse **file system functions**, not `paste()`, `strsplit()`, etc.\n\n::: notes\nWorking directory is associated with a specific process or running application.\n\nWhen you open a project in RStudio or Positron, it sets the working directory to the project root - this is that \"stable base\"\n\n\"Working directory\" as a concept is not comparable to \"home directory\".\n\"Home directory\" is a static, persistent thing.\n:::\n\n## Practice \"safe paths\"\n\nInstead of:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/andy/path/that/only/I/have\")\nmy_data <- read.csv(\"data/my_data.csv\")\n```\n:::\n\n\nOr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(\"C:/Users/andy/path/that/only/I/have/data/my_data.csv\")\n```\n:::\n\n\n## Practice \"safe paths\"\n\nSet your work up as an RStudio or Positron Project/Workspace and use relative paths:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(\"data/my_data.csv\")\n```\n:::\n\n\nOr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(file.path(\"data\", \"my_data.csv\"))\n```\n:::\n\n\n## Work on multiple projects at once\n\nBecause each project uses an isolated **R** process\n\n![](img/many-projects.png)\n\n## Which persist after `rm(list = ls())`?\n\n| Option                                 | Persists? |\n|----------------------------------------|-----------|\n| A. `library(dplyr)`                    |           |\n| B. `summary <- head`                   |           |\n| C. `options(stringsAsFactors = FALSE)` |           |\n| D. `Sys.setenv(LANGUAGE = \"fr\")`       |           |\n| E. `x <- 1:5`                          |           |\n| F. `attach(iris)`                      |           |\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_aeb5e0ce\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Which persist after `rm(list = ls())`?\n\n| Option | Persists? |\n|-----------------------------------------------------|-------------------|\n| A. `library(dplyr)` | [{{< fa check >}}]{style=\"color:#8afb00;\"} |\n| B. `summary <- head` | [{{< fa xmark >}}]{style=\"color:#ccc;\"} |\n| C. `options(stringsAsFactors = FALSE)` | [{{< fa check >}}]{style=\"color:#8afb00;\"} |\n| D. `Sys.setenv(LANGUAGE = \"fr\")` | [{{< fa check >}}]{style=\"color:#8afb00;\"} |\n| E. `x <- 1:5` | [{{< fa xmark >}}]{style=\"color:#ccc;\"} |\n| F. `attach(iris)` | [{{< fa check >}}]{style=\"color:#8afb00;\"} |\n\n## Start R with a blank slate\n\n:::::: columns\n::: {.column width=\"48%\"}\n-   Save **code** for reproducibility.\n-   When you quit: do not save the workspace to an `.Rdata` file.\n-   When you start: do not reload the workspace from an `.Rdata` file.\n-   In RStudio, set this via `Tools > Global Options`.\n-   Or use `usethis::use_blank_slate()`\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"50%\"}\n![](img/rstudio-blank-slate.png)\n:::\n::::::\n\n*This is the default (and not customizable) in Positron* \n\n## Restart R often\n\n<br>\n\n:::::: columns\n\n::: {.column width=\"48%\"}\nSession -\\> Restart R\n\n![](img/restart-rstudio.png)\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\nWindows\n\n-   `Ctrl + Shift + F10`\n\nMac\n\n-   `Cmd + Shift + 0`\n:::\n\n::::::\n\n## Project initiation: RStudio Project\n\n1.  New folder + make it an RStudio Project\n\n-   `usethis::create_project(\"~/i_am_new\")`\n\n-   File -\\> New Project -\\> New Directory -\\> New Project\n\n2.  Make existing folder into an RStudio Project\n\n-   `usethis::create_project(\"~/i_exist\")`\n\n-   File -\\> New Project -\\> Existing Directory\n\n## Project initiation: Positron Workspace\n\n1.  New folder + make it a workspace\n\n-   `usethis::create_project(\"~/i_am_new\", rstudio = FALSE)`\n\n-   File -\\> New Folder From Template\n\n2.  Open an existing directory as a workspace\n\n-   `usethis::create_project(\"~/i_exist\", rstudio = FALSE)`\n\n-   File -\\> New Project -\\> Existing Directory\n\n*Note: if you don't specify `rstudio = FALSE`, it will create an RStudio `.Rproj` file. This does no harm.*\n\n. . .\n\n::: question\nTry either option now with a folder containing (or that will contain) `Bivalve Data 2014-2022_ICE.csv`.\n:::\n\n\n## Naming things\n\n:::::: columns\n::: {.column width=\"48%\"}\n<br> machine readable\n\n<br>\n\nhuman readable\n\n<br>\n\nsort nicely\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n![](img/jenny-naming-things.png)\n\nJenny Bryan ‚ÄúNaming things‚Äù video\n\nNormConf ¬∑ Dec 4, 2022:\n\n<https://www.youtube.com/watch?v=ES1LTlnpLMk>\n:::\n::::::\n\n## Naming things\n\n::: question\nWhat features differentiate üòî vs üòç?\n:::\n\n:::::::: columns\n::::: {.column width=\"10%\"}\n<br>\n\n::: r-fit-text\nüòî\n:::\n\n<br>\n\n<br>\n\n::: r-fit-text\nüòç\n:::\n:::::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column .small width=\"86%\"}\nmyabstract.docx\n\nJoe's Filenames Use Spaces and Punctuation.xlsx\n\nfigure 1.png\n\nhomework.R\n\nJW7d\\^(2sl\\@deletethisandyourcareerisoverWx2\\*.txt\n\n<br>\n\n2018-01_teucher-abstract-conference.docx\n\njoes-filenames-are-getting-better.xlsx\n\nfig01_scatterplot-talk-length-vs-interest.png\n\n2024-07-25_ecol-455_assignment-5.R\n\n1986-01-28_raw-data-from-challenger-o-rings.txt\n:::\n::::::::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_cfdab767\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Names machines like {.smaller}\n\n1.  don't leave white space\n\n. . .\n\n2.  use letters, numbers, hyphens and underscores... that's it <br> (characters like \\^.\\*?+\\|\\$ can have a special meaning)\n\n. . .\n\n3.  be consistent with case <br> (some operating systems treat a and A the same, some differently).\n\n. . .\n\n4.  use separator characters wisely\n\n¬† ¬† use underscore `_` to separate different chunks\n\n¬† ¬† use hyphen `-` for words in the same chunk\n\n. . .\n\n<br>\n\nThis creates names that are regular expression and globbing friendly, and easy to compute on!\nüéâ\n\n::: footer\nAdapted from <br> <https://djnavarro.net/slides-project-structure/#1>.\n:::\n\n::: notes\nGlobbing: use of pattern matching against the names in a filesystem directory such that a name pattern is expanded into a list of names matching that pattern.\n:::\n\n## Names humans like\n\n<br>\n\nname contains info on content\n\nname anticipates context\n\nconcept of a slug üêå from user-friendly URLs\n\n-   1986-01-28\\_`raw-data-from-challenger-o-rings`.txt\n\n-   concise, meaningful description\n\n-   usually appended to the end\n\n::: notes\nNote: A URL slug is the part of the URL after the last backslash\n:::\n\n## Names that sort nicely\n\n<br>\n\nput something numeric in there\n\nleft pad with zeros for constant width, nice sorting, `01`\n\nuse the ISO 8601 standard for dates, `YYYY-MM-DD`\n\norder = chronological or ...\nconsider common sense\n\n## ISO 8601\n\n::::::: {.columns .v-center-container}\n::: {.column width=\"40%\"}\n![](img/chicken-broth.PNG)\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n:::: {.column width=\"56%\"}\n::: r-fit-text\nYYYY-MM-DD\n\nISO 8601\n:::\n\n<https://www.iso.org/iso-8601-date-and-time-format.html>\n::::\n:::::::\n\n::: footer\n<https://twitter.com/JennyBryan/status/816143967695687684>\n:::\n\n## üëç file names {.center-x}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fs)\nlibrary(dplyr)\n\nft <- tibble(files = dir_ls(\"_examples/data/\", glob = \"*.csv\"))\n```\n:::\n\n\n<br>\n\nIntuitive sorting.\n\n:::: columns\n\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\nft\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 1\n  files                                           \n  <fs::path>                                      \n1 _examples/data/2024-07-16_site-2_plot-data.csv  \n2 _examples/data/2024-07-25_site-2_survey-data.csv\n3 _examples/data/2024-08-12_site-1_plot-data.csv  \n4 _examples/data/2024-08-18_site-1_survey-data.csv\n```\n\n\n:::\n:::\n\n:::\n\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(ft, desc(files))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 1\n  files                                           \n  <fs::path>                                      \n1 _examples/data/2024-08-18_site-1_survey-data.csv\n2 _examples/data/2024-08-12_site-1_plot-data.csv  \n3 _examples/data/2024-07-25_site-2_survey-data.csv\n4 _examples/data/2024-07-16_site-2_plot-data.csv  \n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n\n## üëç file names {.center-x}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\nfilter(ft, str_detect(files, pattern = \"plot-data\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 1\n  files                                         \n  <fs::path>                                    \n1 _examples/data/2024-07-16_site-2_plot-data.csv\n2 _examples/data/2024-08-12_site-1_plot-data.csv\n```\n\n\n:::\n:::\n\n\nEasy to filter in R (or the shell or whatever)\n\n## üëç file names {.center-x}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nft |> \n  mutate(files = path_ext_remove(files)) |> \n  separate(files, into = c(\"date\", \"site\", \"data_type\"), sep = \"_\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 3\n  date  site                     data_type\n  <chr> <chr>                    <chr>    \n1 \"\"    examples/data/2024-07-16 site-2   \n2 \"\"    examples/data/2024-07-25 site-2   \n3 \"\"    examples/data/2024-08-12 site-1   \n4 \"\"    examples/data/2024-08-18 site-1   \n```\n\n\n:::\n:::\n\n\nIntentional delimiters means meta-data is easily recovered.\n\n`_` delimits fields; `-` delimits words\n\n::: question\nRename the file `Bivalve Data 2014-2022_ICE.csv` to something that is machine readable, human readable, and sorts nicely.\n\nRead the file in to R using a relateive path\n:::\n\n## Names matter\n\n<br>\n\nmachine readable, human readable, and sort nicely\n\n<br>\n\n. . .\n\neasy to implement NOW\n\n<br>\n\npayoffs accumulate as your skills evolve and <br> projects get more complex\n\n## Project structure\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmy-project/\n‚îú‚îÄ‚îÄ 01_read-data.R\n‚îú‚îÄ‚îÄ 02_clean-data.R\n‚îú‚îÄ‚îÄ 03_analysis.R\n‚îú‚îÄ‚îÄ 04_output.R\n‚îú‚îÄ‚îÄ R\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ data\n‚îÇ   ‚îú‚îÄ‚îÄ derived_data\n‚îÇ   ‚îî‚îÄ‚îÄ raw_data\n‚îú‚îÄ‚îÄ outputs\n‚îî‚îÄ‚îÄ paper\n    ‚îú‚îÄ‚îÄ paper.qmd\n    ‚îî‚îÄ‚îÄ references.bib\n```\n\n\n:::\n:::\n\n\n# Personal R administration\n\n## Your R installation\n\n## R packages\n\n::: {.fragment fragment-index=\"1\"}\n**R packages**\n\n-   the natural unit for distributing R code\n:::\n\n::: {.fragment fragment-index=\"2\"}\n**base R**\n\n-   14 base + 15 recommended packages\n\n-   ships with all binary distributions of R\n:::\n\n\n## Additional packages\n\n:::: columns\n::: {.column width=\"48%\"}\n**CRAN, \\~20k packages**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install from CRAN\ninstall.packages(\"devtools\")\n# attach\nlibrary(devtools)\n```\n:::\n\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n\n**GitHub ~‚àû packages**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install from GitHub\nremotes::install_github(\"r-lib/devtools\")\n# attach\nlibrary(devtools)\n```\n:::\n\n*development versions, or packages not on CRAN*\n\n:::\n::::\n\n## R Libraries - where do packages live?\n\n- A library is a directory containing installed packages\n- You have at least one library on your computer\n- Common (and recommended) to have two libraries: \n    - A *system* library with base (14) and recommended (15) packages; installed with R.\n    - A *user* library with user-installed packages\n- We use `library(pkg)` function to attach a package\n- 7 base packages are always attached (base, methods, utils, stats, grDevices, datasets, graphics)\n\n\n## Where do packages live locally?\n\n<br>\n\nThe system library (base/recommended packages).\n\n`.Library`\n\n<br>\n\nAll libraries for the current session\n\n`.libPaths()`\n\n<br>\n\nAll installed packages\n\n`installed.packages()`\n\n## Your turn\n\n1. What libraries are in use in your current R session?\n2. Using `installed.packages()`, what are the base and recommended packages?\n\n## Installing and updating packages\n\n\n\n## R Startup\n\n![](img/r-startup.svg)\n\n::: notes\ncomplexity in R startup, for both personal and system-level customization. We can ignore most of it\n:::\n\n## R Startup\n\n1. `.Rprofile` - contains **R code** to be run at the start of each session.\n2. `.Renviron` - contains **environment variables** to be set in R sessions.\n\n## what to put in `.Rprofile`\n\n-   set a default CRAN mirror\n-   custom startup message\n\n## what *not* to put in `.Rprofile`\n\nIf it matters for code you share, it **should not** be in `.Rprofile`\n\n### why shouldn't these go in `.Rprofile`?\n\n::: incremental\n-   `library(tidyverse)`\n-   `f <- dplyr::filter`\n-   `theme_set(theme_bw())`\n:::\n\n## Why *might* these be safe to put in `.Rprofile`?\n\n<br>\n\n``` r\nlibrary(usethis)\nlibrary(devtools)\n```\n\n## `.Rprofile` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_profile()\n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n## `.Renviron`\n\n- Set environment variables for R sessions\n- Often sensitive information that you don't want to share\n\n### Examples\n- API Keys (Eg GitHub, ChatGPT etc)\n- Database username and password\n- Some R options\n\n## `.Renviron`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_environ()\n```\n:::\n\n\n```\nVAR_NAME=value\nGOOGLE_API_KEY=your_api_key_here\n```\n\n## `.Renviron`\n\nAccess environment variables in R with `Sys.getenv(\"VAR_NAME\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.getenv(\"GOOGLE_API_KEY\")\n#> [1] \"your_api_key_here\"\n```\n:::\n\n\n## Your turn\n\n- Create an environment variable in `.Renviron` called `MY_NAME` with your name as the value.\n- Create a custom startup message in `.Rprofile` that gives you a personalized message when you start R.\n\n# Efficient use of your IDE\n\n## Customizing your IDE\n\n<br>\n\n- Pane layout\n- Themes\n- Fonts\n- Positron extensions\n\n\n## Keyboard shortcuts\n\n### If in doubt, use the command palette: `Ctrl + Shift + P`\n\n## Navigation & Files\n\n-   **Ctrl + Shift + N** - New file\n-   **Ctrl + S** - Save current file\n-   **Ctrl + F** - Find in current file\n-   **Ctrl + Shift + F** - Find in files (global search)\n-   **Ctrl + .** - Go to file/function\n-   **Ctrl + 1** - Focus source editor\n-   **Ctrl + 2** - Focus console\n\n## Code Editing\n\n-   **Ctrl + Shift + C** - Comment/uncomment lines\n-   **Tab** - Indent selection\n-   **Shift + Tab** - Unindent selection\n-   **Alt + Up/Down** - Move line(s) up/down\n-   **Alt + Shift + Up/Down** - Duplicate line(s) ???\n-   **Ctrl + X** - Cut entire line (when no selection)\n\n## Magic of Multiple Cursors\n\n-   **Ctrl + Alt + Up/Down** - Add cursor above/below\n-   **Ctrl + D** - Add next occurrence of selected text (custom)\n\n## Navigation Within Code\n\n-   **Ctrl + Left/Right** - Jump word by word\n-   **Home/End** - Jump to beginning/end of line\n-   **Ctrl + Home/End** - Jump to beginning/end of document\n-   **Ctrl + P** - Jump to matching brace\n\n## R-Specific\n\n-   **Tab** - Auto-complete\n-   **F1** - Show help for function under cursor\n-   **Ctrl + Shift + F10** - Restart R session\n-   **Ctrl + Shift + M** - Insert pipe operator (`%>%` or `|>`)\n-   **Alt + -** - Insert assignment operator (`<-`)\n\n## `.Last.value`\n\nShows last evaluated value in console\n\n### RStudio\n\n- Tools > Global Options > General > Advanced > Show `.Last.value` in environment listing\n\n### Positron\n\nControlled by an option:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_profile()\noptions(positron.show_last_value = TRUE)\n```\n:::\n\n\n## Automatic code formatting\n\n### Air: <https://posit-dev.github.io/air/>\n\n- In charge of the *layout* of your R code. \n- Formatters do not change the meaning of code\n- Ensure that whitespace, newlines, and other punctuation conform to a set of rules and standards\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_air()\n```\n:::\n\n\n## Reprexes\n\n\n\n# Homework\n\n## Start using project-oriented workflows in your work\n\n<br>\n\n- Use RStudio or Positron Projects/Workspaces\n- don't use `setwd()`\n- use relative paths\n- Use a blank slate - restart R often\n\n## Try to name files well\n\n<br>\n\n- machine readable\n- human readable\n- sorts nicely (including ISO 8601 dates)\n\n## Use Positron or RStudio more efficiently\n\n<br>\n\n- use keyboard shortcuts\n- use the command palette\n- use Air\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}