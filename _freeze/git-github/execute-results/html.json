{
  "hash": "01de74edee10e064c612960c42798b85",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Version Control with Git and Collaboration with GitHub\"\nsubtitle: \"Parks Canada; Ecological Integrity Monitoring Program\"\nauthor: \"Andy Teucher\"\nformat: revealjs\n---\n\n## Configure Git\n\nConfigure your `user.name` and `user.email` for git. This information will be associated with your commits.\n\n### In the terminal\n\n\n```bash\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email \"jane@doe.ca\"\n```\n\n<br>\n\n### In RStudio\n\n```r\nusethis::use_git_config(\n  user.name = \"Jane Doe\",\n  user.email = \"jane@example.com\"\n)\n```\n\n## Check link between R and GitHub {#check-link-between-r-and-github}\nCommunicating with GitHub requires authentication with your GitHub account.\nThis is achieved by creating and securely storing a Personal Access Token (PAT).\nThe [Managing Git(Hub) Credentials](https://usethis.r-lib.org/articles/articles/git-credentials.html) vignette in the **`usethis`** [@usethis] package has details on using PATs, but for now the following should suffice.\n\nCreate a PAT with:\n\n\n::: {.cell}\n\n:::\n\n\n-   Give the token a descriptive name, accept the default scopes, and click \"Generate Token\".\n-   Copy the newly generated PAT to your clipboard.\n-   Run `gitcreds::gitcreds_set()` in R and paste in your PAT when prompted.\n-   After you close the PAT webpage, you won't be able to see your PAT again! You can store it somewhere secure, such as in a password manager.\n\n### Caveat about storing PATs on Linux:\n\nmacOS and Windows both have built-in credential managers that will securely store your PAT, however the same does not exist in Linux.\n[Happy Git with R has a section on options for storing your PAT on Linux](https://happygitwithr.com/https-pat#pat-doesnt-persist-on-linux).\n\n::: aside\nYou may need to install the **`gitcreds`** package [@gitcreds].\n:::\n\nYou can now check your Git setup by asking for a \"situation report\":\n\n\n::: {.cell}\n\n:::\n\n\n::: cell-output\n```\n── Git global (user)\n• Name: 'Andy Teucher'\n• Email: 'andy.teucher@gmail.com'\n• Global (user-level) gitignore file: '/Users/andy/.gitignore'\n• Vaccinated: TRUE\nℹ Defaulting to 'https' Git protocol\n• Default Git protocol: 'https'\n• Default initial branch name: 'main'\n\n── GitHub user\n• Default GitHub host: 'https://github.com'\n• Personal access token for 'https://github.com': '<discovered>'\n• GitHub user: 'ateucher'\n• Token scopes: 'gist, repo, user, workflow'\n• Email(s): 'andy.teucher@gmail.com (primary)'\nℹ No active usethis project\n```\n:::\n\nThe output shows information about the link between RStudio and GitHub.\nNot all of it is relevant now, but it is essential to check whether your name and email are correct and the PAT is showing as \"discovered\":\n\n::: cell-output\n```\nPersonal access token for 'https://github.com': '<discovered>'\n```\n:::\n",
    "supporting": [
      "git-github_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}