{
  "hash": "1adea1ffe5b6a5e95b0fd57c942c871c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advanced Data Manipulation with `dplyr` and `tidyr`\"\nsubtitle: \"Parks Canada; Ecological Integrity Monitoring Program\"\nauthor: \"Andy Teucher\"\nformat: revealjs\n---\n\n## Data\n\n### Using data from the [Portal Project](https://portal.weecology.org/)\n\nLong-term ecological research site studying the dynamics of desert rodents, plants, ants and weather in Arizona.\n\nData available from the [GitHub repo](https://github.com/weecology/PortalData) via the [`portalr`](https://github.com/weecology/portalr) package.\n\n## Setup\n\n1. Create a new project in Positron\n\nUse the GUI or `usethis::create_project(\"data-manipulation\")`\n\n2. Put the project under version control\n\n3. Create a new file: `01-get-data.R`\n\n4. Download the data:\n\n\n::: {.cell}\n\n:::\n\n\nExplore the downloaded data in Positron\n\n\n## Review of main `dplyr` operations\n\n- Selecting columns with `select()`\n- Filtering rows with `filter()`\n- \"Slice\" rows with `slice()`/`slice_*()`\n- Creating new columns with `mutate()`\n- Summarizing data with `summarize()`\n\n::: {.fragment}\n- Grouping data with `group_by()` applies `filter()`, `mutate()`, and `summarize()` by group\n:::\n\n## Warm-up\n\nRead in the rodent capture data (`PortalData/Rodents/Portal_rodent.csv`). \n\n1. Use `readr::read_csv()` and assign it to a data frame called `rodents`.\n2. Standardize column names to use `snake_case` *(hint: check out the `janitor` package)*\n\n## `dplyr` practice\n\n::::: {.columns}\n::: {.column width=\"68%\"}\n\n1. Remove records from invalid sampling periods (when `period` is negative). Re-assign the result to the `rodents` data frame.\n\n2. How many individuals of each species were caught in 1995?\n\n3. What date had the highest number of individual rodents caught?\n\n:::\n\n:::: {.column width=\"30%\"}\n::: {style=\"padding-left: 1em; border-left: 1px solid #ccc;\"}\n\n**Key columns**\n\n- `id` = individual identifier\n- `day`, `month`, `year` = date of capture\n- `period` = sampling period\n- `species` = species code\n- `wgt` = weight (grams)\n- `year` = year of capture\n\n:::\n::::\n:::::\n\n## `dplyr` practice\n\n::::: {.columns}\n::: {.column width=\"68%\"}\n\n4. For each capture record, calculate the percent difference in weight from the average weight of that species.\n\n5. Of all individual Ord's Kangaroo Rats (species code \"DO\") that have been caught more than 5 times, which individual was consistently the biggest? (i.e., has the highest average percent difference in weight from the species' average weight)?\n\n:::\n\n:::: {.column width=\"30%\"}\n::: {style=\"padding-left: 1em; border-left: 1px solid #ccc;\"}\n\n**Key columns**\n\n- `id` = individual identifier\n- `day`, `month`, `year` = date of capture\n- `period` = sampling period\n- `species` = species code\n- `wgt` = weight (grams)\n- `year` = year of capture\n\n:::\n::::\n:::::\n\n## Two-table verbs (joins)\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n![](img/tables-join-1.png){.absolute width=540px left=80px top=225px}\n\n:::\n\n::: {.column width=\"50%\"}\n\n### Mutatating joins\n\n- Combine two tables based on common values in one or more columns\n\n### Filtering joins\n\n- Filter rows from one table based on values in another table\n\n::: \n:::\n\n::: {.resources}\n\n<https://r4ds.hadley.nz/joins.html#how-do-joins-work>\n\n:::\n\n## Join syntax\n\nIf don't specify join columns, will join on all common names\n\n- E.g., both tables have columns year, month, day\n```r\nleft_join(x, y)\n#> Joining with `by = join_by(year, month, day)`\n```\n\n<br>\n\nBetter to specify the join columns explicitly\n\n- Both tables have columns column_1 and column_2\n\n```r\nleft_join(x, y, by = c(\"column_1\", \"column_2\"))\n```\n\n\n- If the columns to join on have different names in each table\n\n```r\nleft_join(x, y, by = c(\"column_in_x\" = \"column_in_y\"))\n```\n## Join syntax\n\nMore complex joins using `dplyr::join_by()`. \n\n- Eg., inequality joins\n\n```r\nleft_join(x, y, by = join_by(column_1 >= column_2))\n```\n\n```r\nleft_join(x, y, by = join_by(id, closest(capture_date >= survey_start_date)))\n```\n\n::: {.resources}\n\n<https://dplyr.tidyverse.org/reference/join_by.html#join-types>\n\n:::\n\n## Mutating joins\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n### `left_join()`\n\n- Keeps all rows in the [left]{.highlight-term} table\n- Drops rows from the [right]{.highlight-term} table that don't match\n- Rows in the [left]{.highlight-term} that don't match get `NA` in the columns from the [right]{.highlight-term} table\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](img/left-join.png)\n\n:::\n:::\n\n::: {.resources}\n\n<https://r4ds.hadley.nz/joins.html#how-do-joins-work>\n\n:::\n\n## Mutating joins\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n### `right_join()`\n\n- Keeps all rows in the [right]{.highlight-term} table\n- Drops rows from the [left]{.highlight-term} table that don't match\n- Rows in the [right]{.highlight-term} table that don't match get `NA` in the columns from the [left]{.highlight-term} table\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](img/right-join.png)\n\n:::\n:::\n\n::: {.resources}\n\n<https://r4ds.hadley.nz/joins.html#how-do-joins-work>\n\n:::\n\n## Mutating joins\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n### `inner_join()`\n\n- Keeps all rows in both tables where keys match\n- Rows from either table that don't match are dropped\n\n:::\n::: {.column width=\"50%\"}\n\n![](img/inner-join.png)\n\n:::\n:::\n\n::: {.resources}\n\n<https://r4ds.hadley.nz/joins.html#how-do-joins-work>\n\n:::\n\n## Mutating joins\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n### `full_join()`\n\n- Keeps all rows in both tables\n- Values in x and y that don't match get `NA` in the result\n\n:::\n::: {.column width=\"50%\"}\n\n![](img/full-join.png)\n\n:::\n:::\n\n::: {.resources}\n\n<https://r4ds.hadley.nz/joins.html#how-do-joins-work>\n\n:::\n\n## Filtering joins\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n### `semi_join()`\n\n- Keeps all rows in the [left]{.highlight-term} table where there are matching key values in the [right]{.highlight-term} table\n- Does not add any columns\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](img/semi-join.png)\n\n:::\n:::\n\n\n## Filtering joins\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n### `anti_join()`\n\n- Keeps all rows in the [left]{.highlight-term} table where there are not matching values in the [right]{.highlight-term} table\n- Does not add any columns\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](img/anti-join.png)\n\n:::\n:::\n\n## Column-wise operations\n\n- Apply one or more functions to a set of columns in a data frame using `across()`\n- Specfiy columns using [selection helpers](https://tidyselect.r-lib.org/reference/language.html) (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`, etc.)\n- Used with `summarize()`, `mutate()`, `filter()`\n\n### Example: calculate mean and sd of all numeric columns\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\npenguins |> \n    summarize(\n        across(where(is.numeric), list(mean = mean, sd = sd), na.rm = TRUE)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  bill_len_mean bill_len_sd bill_dep_mean bill_dep_sd flipper_len_mean\n1      43.92193    5.459584      17.15117    1.974793         200.9152\n  flipper_len_sd body_mass_mean body_mass_sd year_mean   year_sd\n1       14.06171       4201.754     801.9545  2008.029 0.8183559\n```\n\n\n:::\n:::\n\n:::\n\n::: {.resources}\n\n<https://tidyselect.r-lib.org/reference/language.html>\n\n:::\n\n# Row-wise operations\n\n# Window functions\n\n# `tidyr`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}